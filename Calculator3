package Calculator3;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

//LV3. 계산기
//양의 정수만 받았지만 이제부터는 실수도 받을수 있게 수정한다. O
//결과가 저장되어 있는 컬렉션을 조회하는 기능을 만든다. X
//그때 특정 값 보다 큰 결과 값을 출력 할 수 있도록. X
public class Calculator3 {
    //계산 결과를 저장하는 리스트 (실수형)
    private List<Double> results;

    //생성자, 리스트 결과 초기화
    public Calculator3() {
        results = new ArrayList<>();
    }

    //(정수 나 실수)2개 숫자와 연사자를 받아, 결과 값을 반환
    public double calculate(double number1, double number2, char operator) {
        double result = 0;

        switch (operator) {
            case '+':
                result = number1 + number2;
                break;
            case '-':
                result = number1 - number2;
                break;
            case '*':
                result = number1 * number2;
                break;
            case '/':
                if (number2 == 0) {
                    System.out.println("나눗셈 연산에서 분모(두번째 정수)에 0이 입력될 수 없습니다.");
                    return 0;//결과 0 반환
                } else {
                    result = number1 / number2;
                }
                break;
            default:
                System.out.println("잘못된 연산 기호입니다.");
                return 0;//잘못된 연산일 경우 0 반환
        }
        results.add(result);//결과 값을 리스트에 추가
        return result;//결과 값 반환
    }

    //결과 리스트를 반환, 외부에서 직접 수정할 수 없도록 방지(캡슐화)
    public List<Double> getResults() {
        return new ArrayList<>(results);//결과 리스트의 복사본을 생성하여 반환
    }

    //결과 리스트를 설정, 객체의 내부 상태를 보호하고 외부에서의 직접적인 조작을 방지(캡슐화)
    public void setResults(List<Double> results) {
        this.results = new ArrayList<>(results);//전달된 결과 리스트를 새로 복사하여 설정
    }

    //가장 먼저 추가된 데이터를 삭제하는 메서드
    public void removeResult() {
        if (!results.isEmpty()) {//리스트가 비어있지 않다면 첫 번째 요소를 삭제
            results.remove(0);//가장 먼저 저장된 데이터 삭제
            System.out.println("가장 먼저 저정된 데이터가 삭제되었습니다.");
        } else {
            System.out.println("저장된 데이터가 없습니다.");//리스트가 비어있다면 메시지 출력
        }
    }
}
